//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package magothy

import (
	"strconv"
	"strings"
	"fmt"
)
// Component capability flags (Bitmap)
type COMPONENT_CAP_FLAGS uint64

const (
	// Component has parameters, and supports the parameter protocol (PARAM messages).
	COMPONENT_CAP_FLAGS_PARAM COMPONENT_CAP_FLAGS = 1
	// Component has parameters, and supports the extended parameter protocol (PARAM_EXT messages).
	COMPONENT_CAP_FLAGS_PARAM_EXT COMPONENT_CAP_FLAGS = 2
)

var labels_COMPONENT_CAP_FLAGS = map[COMPONENT_CAP_FLAGS]string{
	COMPONENT_CAP_FLAGS_PARAM: "COMPONENT_CAP_FLAGS_PARAM",
	COMPONENT_CAP_FLAGS_PARAM_EXT: "COMPONENT_CAP_FLAGS_PARAM_EXT",
}

var values_COMPONENT_CAP_FLAGS = map[string]COMPONENT_CAP_FLAGS{
	"COMPONENT_CAP_FLAGS_PARAM": COMPONENT_CAP_FLAGS_PARAM,
	"COMPONENT_CAP_FLAGS_PARAM_EXT": COMPONENT_CAP_FLAGS_PARAM_EXT,
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e COMPONENT_CAP_FLAGS) MarshalText() ([]byte, error) {
	if e == 0 {
		return []byte("0"), nil
	}
	var names []string
	for i := 0; i < 2; i++ {
		mask := COMPONENT_CAP_FLAGS(1 << i)
		if e&mask == mask {
			names = append(names, labels_COMPONENT_CAP_FLAGS[mask])
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *COMPONENT_CAP_FLAGS) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask COMPONENT_CAP_FLAGS
	for _, label := range labels {
		if value, ok := values_COMPONENT_CAP_FLAGS[label]; ok {
			mask |= value
		} else if value, err := strconv.Atoi(label); err == nil {
			mask |= COMPONENT_CAP_FLAGS(value)
		} else {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e COMPONENT_CAP_FLAGS) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
