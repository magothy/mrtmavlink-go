//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package magothy

import (
	"strconv"
	"fmt"
)
type FENCE_ACTION uint64

const (
	// Disable fenced mode
	FENCE_ACTION_NONE FENCE_ACTION = 0
	// Switched to guided mode to return point (fence point 0)
	FENCE_ACTION_GUIDED FENCE_ACTION = 1
	// Report fence breach, but don't take action
	FENCE_ACTION_REPORT FENCE_ACTION = 2
	// Switched to guided mode to return point (fence point 0) with manual throttle control
	FENCE_ACTION_GUIDED_THR_PASS FENCE_ACTION = 3
	// Switch to RTL (return to launch) mode and head for the return point.
	FENCE_ACTION_RTL FENCE_ACTION = 4
)

var labels_FENCE_ACTION = map[FENCE_ACTION]string{
	FENCE_ACTION_NONE: "FENCE_ACTION_NONE",
	FENCE_ACTION_GUIDED: "FENCE_ACTION_GUIDED",
	FENCE_ACTION_REPORT: "FENCE_ACTION_REPORT",
	FENCE_ACTION_GUIDED_THR_PASS: "FENCE_ACTION_GUIDED_THR_PASS",
	FENCE_ACTION_RTL: "FENCE_ACTION_RTL",
}

var values_FENCE_ACTION = map[string]FENCE_ACTION{
	"FENCE_ACTION_NONE": FENCE_ACTION_NONE,
	"FENCE_ACTION_GUIDED": FENCE_ACTION_GUIDED,
	"FENCE_ACTION_REPORT": FENCE_ACTION_REPORT,
	"FENCE_ACTION_GUIDED_THR_PASS": FENCE_ACTION_GUIDED_THR_PASS,
	"FENCE_ACTION_RTL": FENCE_ACTION_RTL,
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e FENCE_ACTION) MarshalText() ([]byte, error) {
	if name, ok := labels_FENCE_ACTION[e]; ok {
		return []byte(name), nil
	}
	return []byte(strconv.Itoa(int(e))), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *FENCE_ACTION) UnmarshalText(text []byte) error {
	if value, ok := values_FENCE_ACTION[string(text)]; ok {
	   *e = value
	} else if value, err := strconv.Atoi(string(text)); err == nil {
	   *e = FENCE_ACTION(value)
	} else {
		return fmt.Errorf("invalid label '%s'", text)
	}
	return nil
}

// String implements the fmt.Stringer interface.
func (e FENCE_ACTION) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
