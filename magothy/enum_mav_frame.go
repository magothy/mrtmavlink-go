//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package magothy

import (
	"strconv"
	"fmt"
)
type MAV_FRAME uint64

const (
	// Global (WGS84) coordinate frame + MSL altitude. First value / x: latitude, second value / y: longitude, third value / z: positive altitude over mean sea level (MSL).
	MAV_FRAME_GLOBAL MAV_FRAME = 0
	// Local coordinate frame, Z-down (x: North, y: East, z: Down).
	MAV_FRAME_LOCAL_NED MAV_FRAME = 1
	// NOT a coordinate frame, indicates a mission command.
	MAV_FRAME_MISSION MAV_FRAME = 2
	// Global (WGS84) coordinate frame + altitude relative to the home position. First value / x: latitude, second value / y: longitude, third value / z: positive altitude with 0 being at the altitude of the home location.
	MAV_FRAME_GLOBAL_RELATIVE_ALT MAV_FRAME = 3
	// Local coordinate frame, Z-up (x: East, y: North, z: Up).
	MAV_FRAME_LOCAL_ENU MAV_FRAME = 4
	// Global (WGS84) coordinate frame (scaled) + MSL altitude. First value / x: latitude in degrees*1.0e-7, second value / y: longitude in degrees*1.0e-7, third value / z: positive altitude over mean sea level (MSL).
	MAV_FRAME_GLOBAL_INT MAV_FRAME = 5
	// Global (WGS84) coordinate frame (scaled) + altitude relative to the home position. First value / x: latitude in degrees*10e-7, second value / y: longitude in degrees*10e-7, third value / z: positive altitude with 0 being at the altitude of the home location.
	MAV_FRAME_GLOBAL_RELATIVE_ALT_INT MAV_FRAME = 6
	// Offset to the current local frame. Anything expressed in this frame should be added to the current local frame position.
	MAV_FRAME_LOCAL_OFFSET_NED MAV_FRAME = 7
	// Setpoint in body NED frame. This makes sense if all position control is externalized - e.g. useful to command 2 m/s^2 acceleration to the right.
	MAV_FRAME_BODY_NED MAV_FRAME = 8
	// Offset in body NED frame. This makes sense if adding setpoints to the current flight path, to avoid an obstacle - e.g. useful to command 2 m/s^2 acceleration to the east.
	MAV_FRAME_BODY_OFFSET_NED MAV_FRAME = 9
	// Global (WGS84) coordinate frame with AGL altitude (at the waypoint coordinate). First value / x: latitude in degrees, second value / y: longitude in degrees, third value / z: positive altitude in meters with 0 being at ground level in terrain model.
	MAV_FRAME_GLOBAL_TERRAIN_ALT MAV_FRAME = 10
	// Global (WGS84) coordinate frame (scaled) with AGL altitude (at the waypoint coordinate). First value / x: latitude in degrees*10e-7, second value / y: longitude in degrees*10e-7, third value / z: positive altitude in meters with 0 being at ground level in terrain model.
	MAV_FRAME_GLOBAL_TERRAIN_ALT_INT MAV_FRAME = 11
	// Body fixed frame of reference, Z-down (x: Forward, y: Right, z: Down).
	MAV_FRAME_BODY_FRD MAV_FRAME = 12
	// MAV_FRAME_BODY_FLU - Body fixed frame of reference, Z-up (x: Forward, y: Left, z: Up).
	MAV_FRAME_RESERVED_13 MAV_FRAME = 13
	// MAV_FRAME_MOCAP_NED - Odometry local coordinate frame of data given by a motion capture system, Z-down (x: North, y: East, z: Down).
	MAV_FRAME_RESERVED_14 MAV_FRAME = 14
	// MAV_FRAME_MOCAP_ENU - Odometry local coordinate frame of data given by a motion capture system, Z-up (x: East, y: North, z: Up).
	MAV_FRAME_RESERVED_15 MAV_FRAME = 15
	// MAV_FRAME_VISION_NED - Odometry local coordinate frame of data given by a vision estimation system, Z-down (x: North, y: East, z: Down).
	MAV_FRAME_RESERVED_16 MAV_FRAME = 16
	// MAV_FRAME_VISION_ENU - Odometry local coordinate frame of data given by a vision estimation system, Z-up (x: East, y: North, z: Up).
	MAV_FRAME_RESERVED_17 MAV_FRAME = 17
	// MAV_FRAME_ESTIM_NED - Odometry local coordinate frame of data given by an estimator running onboard the vehicle, Z-down (x: North, y: East, z: Down).
	MAV_FRAME_RESERVED_18 MAV_FRAME = 18
	// MAV_FRAME_ESTIM_ENU - Odometry local coordinate frame of data given by an estimator running onboard the vehicle, Z-up (x: East, y: North, z: Up).
	MAV_FRAME_RESERVED_19 MAV_FRAME = 19
	// Forward, Right, Down coordinate frame. This is a local frame with Z-down and arbitrary F/R alignment (i.e. not aligned with NED/earth frame).
	MAV_FRAME_LOCAL_FRD MAV_FRAME = 20
	// Forward, Left, Up coordinate frame. This is a local frame with Z-up and arbitrary F/L alignment (i.e. not aligned with ENU/earth frame).
	MAV_FRAME_LOCAL_FLU MAV_FRAME = 21
)

var labels_MAV_FRAME = map[MAV_FRAME]string{
	MAV_FRAME_GLOBAL: "MAV_FRAME_GLOBAL",
	MAV_FRAME_LOCAL_NED: "MAV_FRAME_LOCAL_NED",
	MAV_FRAME_MISSION: "MAV_FRAME_MISSION",
	MAV_FRAME_GLOBAL_RELATIVE_ALT: "MAV_FRAME_GLOBAL_RELATIVE_ALT",
	MAV_FRAME_LOCAL_ENU: "MAV_FRAME_LOCAL_ENU",
	MAV_FRAME_GLOBAL_INT: "MAV_FRAME_GLOBAL_INT",
	MAV_FRAME_GLOBAL_RELATIVE_ALT_INT: "MAV_FRAME_GLOBAL_RELATIVE_ALT_INT",
	MAV_FRAME_LOCAL_OFFSET_NED: "MAV_FRAME_LOCAL_OFFSET_NED",
	MAV_FRAME_BODY_NED: "MAV_FRAME_BODY_NED",
	MAV_FRAME_BODY_OFFSET_NED: "MAV_FRAME_BODY_OFFSET_NED",
	MAV_FRAME_GLOBAL_TERRAIN_ALT: "MAV_FRAME_GLOBAL_TERRAIN_ALT",
	MAV_FRAME_GLOBAL_TERRAIN_ALT_INT: "MAV_FRAME_GLOBAL_TERRAIN_ALT_INT",
	MAV_FRAME_BODY_FRD: "MAV_FRAME_BODY_FRD",
	MAV_FRAME_RESERVED_13: "MAV_FRAME_RESERVED_13",
	MAV_FRAME_RESERVED_14: "MAV_FRAME_RESERVED_14",
	MAV_FRAME_RESERVED_15: "MAV_FRAME_RESERVED_15",
	MAV_FRAME_RESERVED_16: "MAV_FRAME_RESERVED_16",
	MAV_FRAME_RESERVED_17: "MAV_FRAME_RESERVED_17",
	MAV_FRAME_RESERVED_18: "MAV_FRAME_RESERVED_18",
	MAV_FRAME_RESERVED_19: "MAV_FRAME_RESERVED_19",
	MAV_FRAME_LOCAL_FRD: "MAV_FRAME_LOCAL_FRD",
	MAV_FRAME_LOCAL_FLU: "MAV_FRAME_LOCAL_FLU",
}

var values_MAV_FRAME = map[string]MAV_FRAME{
	"MAV_FRAME_GLOBAL": MAV_FRAME_GLOBAL,
	"MAV_FRAME_LOCAL_NED": MAV_FRAME_LOCAL_NED,
	"MAV_FRAME_MISSION": MAV_FRAME_MISSION,
	"MAV_FRAME_GLOBAL_RELATIVE_ALT": MAV_FRAME_GLOBAL_RELATIVE_ALT,
	"MAV_FRAME_LOCAL_ENU": MAV_FRAME_LOCAL_ENU,
	"MAV_FRAME_GLOBAL_INT": MAV_FRAME_GLOBAL_INT,
	"MAV_FRAME_GLOBAL_RELATIVE_ALT_INT": MAV_FRAME_GLOBAL_RELATIVE_ALT_INT,
	"MAV_FRAME_LOCAL_OFFSET_NED": MAV_FRAME_LOCAL_OFFSET_NED,
	"MAV_FRAME_BODY_NED": MAV_FRAME_BODY_NED,
	"MAV_FRAME_BODY_OFFSET_NED": MAV_FRAME_BODY_OFFSET_NED,
	"MAV_FRAME_GLOBAL_TERRAIN_ALT": MAV_FRAME_GLOBAL_TERRAIN_ALT,
	"MAV_FRAME_GLOBAL_TERRAIN_ALT_INT": MAV_FRAME_GLOBAL_TERRAIN_ALT_INT,
	"MAV_FRAME_BODY_FRD": MAV_FRAME_BODY_FRD,
	"MAV_FRAME_RESERVED_13": MAV_FRAME_RESERVED_13,
	"MAV_FRAME_RESERVED_14": MAV_FRAME_RESERVED_14,
	"MAV_FRAME_RESERVED_15": MAV_FRAME_RESERVED_15,
	"MAV_FRAME_RESERVED_16": MAV_FRAME_RESERVED_16,
	"MAV_FRAME_RESERVED_17": MAV_FRAME_RESERVED_17,
	"MAV_FRAME_RESERVED_18": MAV_FRAME_RESERVED_18,
	"MAV_FRAME_RESERVED_19": MAV_FRAME_RESERVED_19,
	"MAV_FRAME_LOCAL_FRD": MAV_FRAME_LOCAL_FRD,
	"MAV_FRAME_LOCAL_FLU": MAV_FRAME_LOCAL_FLU,
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e MAV_FRAME) MarshalText() ([]byte, error) {
	if name, ok := labels_MAV_FRAME[e]; ok {
		return []byte(name), nil
	}
	return []byte(strconv.Itoa(int(e))), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *MAV_FRAME) UnmarshalText(text []byte) error {
	if value, ok := values_MAV_FRAME[string(text)]; ok {
	   *e = value
	} else if value, err := strconv.Atoi(string(text)); err == nil {
	   *e = MAV_FRAME(value)
	} else {
		return fmt.Errorf("invalid label '%s'", text)
	}
	return nil
}

// String implements the fmt.Stringer interface.
func (e MAV_FRAME) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
