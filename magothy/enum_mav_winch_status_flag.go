//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package magothy

import (
	"strconv"
	"strings"
	"fmt"
)
// Winch status flags used in WINCH_STATUS
type MAV_WINCH_STATUS_FLAG uint64

const (
	// Winch is healthy
	MAV_WINCH_STATUS_HEALTHY MAV_WINCH_STATUS_FLAG = 1
	// Winch thread is fully retracted
	MAV_WINCH_STATUS_FULLY_RETRACTED MAV_WINCH_STATUS_FLAG = 2
	// Winch motor is moving
	MAV_WINCH_STATUS_MOVING MAV_WINCH_STATUS_FLAG = 4
	// Winch clutch is engaged allowing motor to move freely
	MAV_WINCH_STATUS_CLUTCH_ENGAGED MAV_WINCH_STATUS_FLAG = 8
)

var labels_MAV_WINCH_STATUS_FLAG = map[MAV_WINCH_STATUS_FLAG]string{
	MAV_WINCH_STATUS_HEALTHY: "MAV_WINCH_STATUS_HEALTHY",
	MAV_WINCH_STATUS_FULLY_RETRACTED: "MAV_WINCH_STATUS_FULLY_RETRACTED",
	MAV_WINCH_STATUS_MOVING: "MAV_WINCH_STATUS_MOVING",
	MAV_WINCH_STATUS_CLUTCH_ENGAGED: "MAV_WINCH_STATUS_CLUTCH_ENGAGED",
}

var values_MAV_WINCH_STATUS_FLAG = map[string]MAV_WINCH_STATUS_FLAG{
	"MAV_WINCH_STATUS_HEALTHY": MAV_WINCH_STATUS_HEALTHY,
	"MAV_WINCH_STATUS_FULLY_RETRACTED": MAV_WINCH_STATUS_FULLY_RETRACTED,
	"MAV_WINCH_STATUS_MOVING": MAV_WINCH_STATUS_MOVING,
	"MAV_WINCH_STATUS_CLUTCH_ENGAGED": MAV_WINCH_STATUS_CLUTCH_ENGAGED,
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e MAV_WINCH_STATUS_FLAG) MarshalText() ([]byte, error) {
	if e == 0 {
		return []byte("0"), nil
	}
	var names []string
	for i := 0; i < 4; i++ {
		mask := MAV_WINCH_STATUS_FLAG(1 << i)
		if e&mask == mask {
			names = append(names, labels_MAV_WINCH_STATUS_FLAG[mask])
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *MAV_WINCH_STATUS_FLAG) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask MAV_WINCH_STATUS_FLAG
	for _, label := range labels {
		if value, ok := values_MAV_WINCH_STATUS_FLAG[label]; ok {
			mask |= value
		} else if value, err := strconv.Atoi(label); err == nil {
			mask |= MAV_WINCH_STATUS_FLAG(value)
		} else {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e MAV_WINCH_STATUS_FLAG) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
