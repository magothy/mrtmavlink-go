//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package magothy

import (
	"strconv"
	"strings"
	"fmt"
)
// Bitmask of (optional) autopilot capabilities (64 bit). If a bit is set, the autopilot supports this capability.
type MAV_PROTOCOL_CAPABILITY uint64

const (
	// Autopilot supports MISSION float message type.
	MAV_PROTOCOL_CAPABILITY_MISSION_FLOAT MAV_PROTOCOL_CAPABILITY = 1
	// Autopilot supports the new param float message type.
	MAV_PROTOCOL_CAPABILITY_PARAM_FLOAT MAV_PROTOCOL_CAPABILITY = 2
	// Autopilot supports MISSION_ITEM_INT scaled integer message type.
	MAV_PROTOCOL_CAPABILITY_MISSION_INT MAV_PROTOCOL_CAPABILITY = 4
	// Autopilot supports COMMAND_INT scaled integer message type.
	MAV_PROTOCOL_CAPABILITY_COMMAND_INT MAV_PROTOCOL_CAPABILITY = 8
	// Autopilot supports the new param union message type.
	MAV_PROTOCOL_CAPABILITY_PARAM_UNION MAV_PROTOCOL_CAPABILITY = 16
	// Autopilot supports the new FILE_TRANSFER_PROTOCOL message type.
	MAV_PROTOCOL_CAPABILITY_FTP MAV_PROTOCOL_CAPABILITY = 32
	// Autopilot supports commanding attitude offboard.
	MAV_PROTOCOL_CAPABILITY_SET_ATTITUDE_TARGET MAV_PROTOCOL_CAPABILITY = 64
	// Autopilot supports commanding position and velocity targets in local NED frame.
	MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_LOCAL_NED MAV_PROTOCOL_CAPABILITY = 128
	// Autopilot supports commanding position and velocity targets in global scaled integers.
	MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_GLOBAL_INT MAV_PROTOCOL_CAPABILITY = 256
	// Autopilot supports terrain protocol / data handling.
	MAV_PROTOCOL_CAPABILITY_TERRAIN MAV_PROTOCOL_CAPABILITY = 512
	// Autopilot supports direct actuator control.
	MAV_PROTOCOL_CAPABILITY_SET_ACTUATOR_TARGET MAV_PROTOCOL_CAPABILITY = 1024
	// Autopilot supports the flight termination command.
	MAV_PROTOCOL_CAPABILITY_FLIGHT_TERMINATION MAV_PROTOCOL_CAPABILITY = 2048
	// Autopilot supports onboard compass calibration.
	MAV_PROTOCOL_CAPABILITY_COMPASS_CALIBRATION MAV_PROTOCOL_CAPABILITY = 4096
	// Autopilot supports MAVLink version 2.
	MAV_PROTOCOL_CAPABILITY_MAVLINK2 MAV_PROTOCOL_CAPABILITY = 8192
	// Autopilot supports mission fence protocol.
	MAV_PROTOCOL_CAPABILITY_MISSION_FENCE MAV_PROTOCOL_CAPABILITY = 16384
	// Autopilot supports mission rally point protocol.
	MAV_PROTOCOL_CAPABILITY_MISSION_RALLY MAV_PROTOCOL_CAPABILITY = 32768
	// Autopilot supports the flight information protocol.
	MAV_PROTOCOL_CAPABILITY_FLIGHT_INFORMATION MAV_PROTOCOL_CAPABILITY = 65536
)

var labels_MAV_PROTOCOL_CAPABILITY = map[MAV_PROTOCOL_CAPABILITY]string{
	MAV_PROTOCOL_CAPABILITY_MISSION_FLOAT: "MAV_PROTOCOL_CAPABILITY_MISSION_FLOAT",
	MAV_PROTOCOL_CAPABILITY_PARAM_FLOAT: "MAV_PROTOCOL_CAPABILITY_PARAM_FLOAT",
	MAV_PROTOCOL_CAPABILITY_MISSION_INT: "MAV_PROTOCOL_CAPABILITY_MISSION_INT",
	MAV_PROTOCOL_CAPABILITY_COMMAND_INT: "MAV_PROTOCOL_CAPABILITY_COMMAND_INT",
	MAV_PROTOCOL_CAPABILITY_PARAM_UNION: "MAV_PROTOCOL_CAPABILITY_PARAM_UNION",
	MAV_PROTOCOL_CAPABILITY_FTP: "MAV_PROTOCOL_CAPABILITY_FTP",
	MAV_PROTOCOL_CAPABILITY_SET_ATTITUDE_TARGET: "MAV_PROTOCOL_CAPABILITY_SET_ATTITUDE_TARGET",
	MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_LOCAL_NED: "MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_LOCAL_NED",
	MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_GLOBAL_INT: "MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_GLOBAL_INT",
	MAV_PROTOCOL_CAPABILITY_TERRAIN: "MAV_PROTOCOL_CAPABILITY_TERRAIN",
	MAV_PROTOCOL_CAPABILITY_SET_ACTUATOR_TARGET: "MAV_PROTOCOL_CAPABILITY_SET_ACTUATOR_TARGET",
	MAV_PROTOCOL_CAPABILITY_FLIGHT_TERMINATION: "MAV_PROTOCOL_CAPABILITY_FLIGHT_TERMINATION",
	MAV_PROTOCOL_CAPABILITY_COMPASS_CALIBRATION: "MAV_PROTOCOL_CAPABILITY_COMPASS_CALIBRATION",
	MAV_PROTOCOL_CAPABILITY_MAVLINK2: "MAV_PROTOCOL_CAPABILITY_MAVLINK2",
	MAV_PROTOCOL_CAPABILITY_MISSION_FENCE: "MAV_PROTOCOL_CAPABILITY_MISSION_FENCE",
	MAV_PROTOCOL_CAPABILITY_MISSION_RALLY: "MAV_PROTOCOL_CAPABILITY_MISSION_RALLY",
	MAV_PROTOCOL_CAPABILITY_FLIGHT_INFORMATION: "MAV_PROTOCOL_CAPABILITY_FLIGHT_INFORMATION",
}

var values_MAV_PROTOCOL_CAPABILITY = map[string]MAV_PROTOCOL_CAPABILITY{
	"MAV_PROTOCOL_CAPABILITY_MISSION_FLOAT": MAV_PROTOCOL_CAPABILITY_MISSION_FLOAT,
	"MAV_PROTOCOL_CAPABILITY_PARAM_FLOAT": MAV_PROTOCOL_CAPABILITY_PARAM_FLOAT,
	"MAV_PROTOCOL_CAPABILITY_MISSION_INT": MAV_PROTOCOL_CAPABILITY_MISSION_INT,
	"MAV_PROTOCOL_CAPABILITY_COMMAND_INT": MAV_PROTOCOL_CAPABILITY_COMMAND_INT,
	"MAV_PROTOCOL_CAPABILITY_PARAM_UNION": MAV_PROTOCOL_CAPABILITY_PARAM_UNION,
	"MAV_PROTOCOL_CAPABILITY_FTP": MAV_PROTOCOL_CAPABILITY_FTP,
	"MAV_PROTOCOL_CAPABILITY_SET_ATTITUDE_TARGET": MAV_PROTOCOL_CAPABILITY_SET_ATTITUDE_TARGET,
	"MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_LOCAL_NED": MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_LOCAL_NED,
	"MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_GLOBAL_INT": MAV_PROTOCOL_CAPABILITY_SET_POSITION_TARGET_GLOBAL_INT,
	"MAV_PROTOCOL_CAPABILITY_TERRAIN": MAV_PROTOCOL_CAPABILITY_TERRAIN,
	"MAV_PROTOCOL_CAPABILITY_SET_ACTUATOR_TARGET": MAV_PROTOCOL_CAPABILITY_SET_ACTUATOR_TARGET,
	"MAV_PROTOCOL_CAPABILITY_FLIGHT_TERMINATION": MAV_PROTOCOL_CAPABILITY_FLIGHT_TERMINATION,
	"MAV_PROTOCOL_CAPABILITY_COMPASS_CALIBRATION": MAV_PROTOCOL_CAPABILITY_COMPASS_CALIBRATION,
	"MAV_PROTOCOL_CAPABILITY_MAVLINK2": MAV_PROTOCOL_CAPABILITY_MAVLINK2,
	"MAV_PROTOCOL_CAPABILITY_MISSION_FENCE": MAV_PROTOCOL_CAPABILITY_MISSION_FENCE,
	"MAV_PROTOCOL_CAPABILITY_MISSION_RALLY": MAV_PROTOCOL_CAPABILITY_MISSION_RALLY,
	"MAV_PROTOCOL_CAPABILITY_FLIGHT_INFORMATION": MAV_PROTOCOL_CAPABILITY_FLIGHT_INFORMATION,
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e MAV_PROTOCOL_CAPABILITY) MarshalText() ([]byte, error) {
	if e == 0 {
		return []byte("0"), nil
	}
	var names []string
	for i := 0; i < 17; i++ {
		mask := MAV_PROTOCOL_CAPABILITY(1 << i)
		if e&mask == mask {
			names = append(names, labels_MAV_PROTOCOL_CAPABILITY[mask])
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *MAV_PROTOCOL_CAPABILITY) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask MAV_PROTOCOL_CAPABILITY
	for _, label := range labels {
		if value, ok := values_MAV_PROTOCOL_CAPABILITY[label]; ok {
			mask |= value
		} else if value, err := strconv.Atoi(label); err == nil {
			mask |= MAV_PROTOCOL_CAPABILITY(value)
		} else {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e MAV_PROTOCOL_CAPABILITY) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
