//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package magothy

import (
	"strconv"
	"fmt"
)
type MAGOTHY_FAULT_RESPONSE uint64

const (
	// Disable Fault
	MAGOTHY_FAULT_RESPONSE_IGNORE MAGOTHY_FAULT_RESPONSE = 0
	// Drift after fault
	MAGOTHY_FAULT_RESPONSE_DRIFT MAGOTHY_FAULT_RESPONSE = 1
	// Loiter at the current position
	MAGOTHY_FAULT_RESPONSE_LOITER MAGOTHY_FAULT_RESPONSE = 2
	// Travel to the nearest rally point
	MAGOTHY_FAULT_RESPONSE_RALLY MAGOTHY_FAULT_RESPONSE = 3
	// Travel to the mission's first waypoint
	MAGOTHY_FAULT_RESPONSE_FIRST MAGOTHY_FAULT_RESPONSE = 4
	// Travel to the mission's final waypoint
	MAGOTHY_FAULT_RESPONSE_FINAL MAGOTHY_FAULT_RESPONSE = 5
	// Travel to the mission's launch point
	MAGOTHY_FAULT_RESPONSE_LAUNCH MAGOTHY_FAULT_RESPONSE = 6
	// Perform fault response defined in vehicle configuration
	MAGOTHY_FAULT_RESPONSE_CUSTOM MAGOTHY_FAULT_RESPONSE = 7
)

var labels_MAGOTHY_FAULT_RESPONSE = map[MAGOTHY_FAULT_RESPONSE]string{
	MAGOTHY_FAULT_RESPONSE_IGNORE: "MAGOTHY_FAULT_RESPONSE_IGNORE",
	MAGOTHY_FAULT_RESPONSE_DRIFT: "MAGOTHY_FAULT_RESPONSE_DRIFT",
	MAGOTHY_FAULT_RESPONSE_LOITER: "MAGOTHY_FAULT_RESPONSE_LOITER",
	MAGOTHY_FAULT_RESPONSE_RALLY: "MAGOTHY_FAULT_RESPONSE_RALLY",
	MAGOTHY_FAULT_RESPONSE_FIRST: "MAGOTHY_FAULT_RESPONSE_FIRST",
	MAGOTHY_FAULT_RESPONSE_FINAL: "MAGOTHY_FAULT_RESPONSE_FINAL",
	MAGOTHY_FAULT_RESPONSE_LAUNCH: "MAGOTHY_FAULT_RESPONSE_LAUNCH",
	MAGOTHY_FAULT_RESPONSE_CUSTOM: "MAGOTHY_FAULT_RESPONSE_CUSTOM",
}

var values_MAGOTHY_FAULT_RESPONSE = map[string]MAGOTHY_FAULT_RESPONSE{
	"MAGOTHY_FAULT_RESPONSE_IGNORE": MAGOTHY_FAULT_RESPONSE_IGNORE,
	"MAGOTHY_FAULT_RESPONSE_DRIFT": MAGOTHY_FAULT_RESPONSE_DRIFT,
	"MAGOTHY_FAULT_RESPONSE_LOITER": MAGOTHY_FAULT_RESPONSE_LOITER,
	"MAGOTHY_FAULT_RESPONSE_RALLY": MAGOTHY_FAULT_RESPONSE_RALLY,
	"MAGOTHY_FAULT_RESPONSE_FIRST": MAGOTHY_FAULT_RESPONSE_FIRST,
	"MAGOTHY_FAULT_RESPONSE_FINAL": MAGOTHY_FAULT_RESPONSE_FINAL,
	"MAGOTHY_FAULT_RESPONSE_LAUNCH": MAGOTHY_FAULT_RESPONSE_LAUNCH,
	"MAGOTHY_FAULT_RESPONSE_CUSTOM": MAGOTHY_FAULT_RESPONSE_CUSTOM,
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e MAGOTHY_FAULT_RESPONSE) MarshalText() ([]byte, error) {
	if name, ok := labels_MAGOTHY_FAULT_RESPONSE[e]; ok {
		return []byte(name), nil
	}
	return []byte(strconv.Itoa(int(e))), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *MAGOTHY_FAULT_RESPONSE) UnmarshalText(text []byte) error {
	if value, ok := values_MAGOTHY_FAULT_RESPONSE[string(text)]; ok {
	   *e = value
	} else if value, err := strconv.Atoi(string(text)); err == nil {
	   *e = MAGOTHY_FAULT_RESPONSE(value)
	} else {
		return fmt.Errorf("invalid label '%s'", text)
	}
	return nil
}

// String implements the fmt.Stringer interface.
func (e MAGOTHY_FAULT_RESPONSE) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
