//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package magothy

import (
	"strconv"
	"fmt"
)
type MAGOTHY_LICENSE_TRANSFER_TYPE uint64

const (
	// Activation request message. Embedded to Cloud
	MAGOTHY_LICENSE_TRANSFER_TYPE_ACTIVATION MAGOTHY_LICENSE_TRANSFER_TYPE = 0
	// License file, response to activation request. Cloud to Embedded
	MAGOTHY_LICENSE_TRANSFER_TYPE_LICENSE_FILE MAGOTHY_LICENSE_TRANSFER_TYPE = 1
	// Deactivation report message. Embedded to Cloud
	MAGOTHY_LICENSE_TRANSFER_TYPE_DEACTIVATION MAGOTHY_LICENSE_TRANSFER_TYPE = 2
)

var labels_MAGOTHY_LICENSE_TRANSFER_TYPE = map[MAGOTHY_LICENSE_TRANSFER_TYPE]string{
	MAGOTHY_LICENSE_TRANSFER_TYPE_ACTIVATION: "MAGOTHY_LICENSE_TRANSFER_TYPE_ACTIVATION",
	MAGOTHY_LICENSE_TRANSFER_TYPE_LICENSE_FILE: "MAGOTHY_LICENSE_TRANSFER_TYPE_LICENSE_FILE",
	MAGOTHY_LICENSE_TRANSFER_TYPE_DEACTIVATION: "MAGOTHY_LICENSE_TRANSFER_TYPE_DEACTIVATION",
}

var values_MAGOTHY_LICENSE_TRANSFER_TYPE = map[string]MAGOTHY_LICENSE_TRANSFER_TYPE{
	"MAGOTHY_LICENSE_TRANSFER_TYPE_ACTIVATION": MAGOTHY_LICENSE_TRANSFER_TYPE_ACTIVATION,
	"MAGOTHY_LICENSE_TRANSFER_TYPE_LICENSE_FILE": MAGOTHY_LICENSE_TRANSFER_TYPE_LICENSE_FILE,
	"MAGOTHY_LICENSE_TRANSFER_TYPE_DEACTIVATION": MAGOTHY_LICENSE_TRANSFER_TYPE_DEACTIVATION,
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e MAGOTHY_LICENSE_TRANSFER_TYPE) MarshalText() ([]byte, error) {
	if name, ok := labels_MAGOTHY_LICENSE_TRANSFER_TYPE[e]; ok {
		return []byte(name), nil
	}
	return []byte(strconv.Itoa(int(e))), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *MAGOTHY_LICENSE_TRANSFER_TYPE) UnmarshalText(text []byte) error {
	if value, ok := values_MAGOTHY_LICENSE_TRANSFER_TYPE[string(text)]; ok {
	   *e = value
	} else if value, err := strconv.Atoi(string(text)); err == nil {
	   *e = MAGOTHY_LICENSE_TRANSFER_TYPE(value)
	} else {
		return fmt.Errorf("invalid label '%s'", text)
	}
	return nil
}

// String implements the fmt.Stringer interface.
func (e MAGOTHY_LICENSE_TRANSFER_TYPE) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
