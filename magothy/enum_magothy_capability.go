//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package magothy

import (
	"strconv"
	"strings"
	"fmt"
)
// Magothy capability flags (bitmask)
type MAGOTHY_CAPABILITY uint64

const (
	// Set if log management is enabled
	MAGOTHY_CAPABILITY_LOG_MANAGEMENT MAGOTHY_CAPABILITY = 1
	// Set if firmware update is enabled
	MAGOTHY_CAPABILITY_FIRMWARE_UPDATE MAGOTHY_CAPABILITY = 2
	// Set if gyro calibration is enabled
	MAGOTHY_CAPABILITY_GYRO_CAL MAGOTHY_CAPABILITY = 4
	// Set if 2D magnetometer calibration is enabled
	MAGOTHY_CAPABILITY_MAG_CAL_2D MAGOTHY_CAPABILITY = 8
	// Set if 3D magnetometer calibration is enabled
	MAGOTHY_CAPABILITY_MAG_CAL_3D MAGOTHY_CAPABILITY = 16
	// Set if spy is enabled
	MAGOTHY_CAPABILITY_SPY MAGOTHY_CAPABILITY = 32
)

var labels_MAGOTHY_CAPABILITY = map[MAGOTHY_CAPABILITY]string{
	MAGOTHY_CAPABILITY_LOG_MANAGEMENT: "MAGOTHY_CAPABILITY_LOG_MANAGEMENT",
	MAGOTHY_CAPABILITY_FIRMWARE_UPDATE: "MAGOTHY_CAPABILITY_FIRMWARE_UPDATE",
	MAGOTHY_CAPABILITY_GYRO_CAL: "MAGOTHY_CAPABILITY_GYRO_CAL",
	MAGOTHY_CAPABILITY_MAG_CAL_2D: "MAGOTHY_CAPABILITY_MAG_CAL_2D",
	MAGOTHY_CAPABILITY_MAG_CAL_3D: "MAGOTHY_CAPABILITY_MAG_CAL_3D",
	MAGOTHY_CAPABILITY_SPY: "MAGOTHY_CAPABILITY_SPY",
}

var values_MAGOTHY_CAPABILITY = map[string]MAGOTHY_CAPABILITY{
	"MAGOTHY_CAPABILITY_LOG_MANAGEMENT": MAGOTHY_CAPABILITY_LOG_MANAGEMENT,
	"MAGOTHY_CAPABILITY_FIRMWARE_UPDATE": MAGOTHY_CAPABILITY_FIRMWARE_UPDATE,
	"MAGOTHY_CAPABILITY_GYRO_CAL": MAGOTHY_CAPABILITY_GYRO_CAL,
	"MAGOTHY_CAPABILITY_MAG_CAL_2D": MAGOTHY_CAPABILITY_MAG_CAL_2D,
	"MAGOTHY_CAPABILITY_MAG_CAL_3D": MAGOTHY_CAPABILITY_MAG_CAL_3D,
	"MAGOTHY_CAPABILITY_SPY": MAGOTHY_CAPABILITY_SPY,
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e MAGOTHY_CAPABILITY) MarshalText() ([]byte, error) {
	if e == 0 {
		return []byte("0"), nil
	}
	var names []string
	for i := 0; i < 6; i++ {
		mask := MAGOTHY_CAPABILITY(1 << i)
		if e&mask == mask {
			names = append(names, labels_MAGOTHY_CAPABILITY[mask])
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *MAGOTHY_CAPABILITY) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask MAGOTHY_CAPABILITY
	for _, label := range labels {
		if value, ok := values_MAGOTHY_CAPABILITY[label]; ok {
			mask |= value
		} else if value, err := strconv.Atoi(label); err == nil {
			mask |= MAGOTHY_CAPABILITY(value)
		} else {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e MAGOTHY_CAPABILITY) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
