//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package magothy

import (
	"strconv"
	"fmt"
)
// Possible values for COMPONENT_INFORMATION.comp_metadata_type.
type COMP_METADATA_TYPE uint64

const (
	// Version information which also includes information on other optional supported COMP_METADATA_TYPE's. Must be supported. Only downloadable from vehicle.
	COMP_METADATA_TYPE_VERSION COMP_METADATA_TYPE = 0
	// Parameter meta data.
	COMP_METADATA_TYPE_PARAMETER COMP_METADATA_TYPE = 1
	// Meta data which specifies the commands the vehicle supports. (WIP)
	COMP_METADATA_TYPE_COMMANDS COMP_METADATA_TYPE = 2
)

var labels_COMP_METADATA_TYPE = map[COMP_METADATA_TYPE]string{
	COMP_METADATA_TYPE_VERSION: "COMP_METADATA_TYPE_VERSION",
	COMP_METADATA_TYPE_PARAMETER: "COMP_METADATA_TYPE_PARAMETER",
	COMP_METADATA_TYPE_COMMANDS: "COMP_METADATA_TYPE_COMMANDS",
}

var values_COMP_METADATA_TYPE = map[string]COMP_METADATA_TYPE{
	"COMP_METADATA_TYPE_VERSION": COMP_METADATA_TYPE_VERSION,
	"COMP_METADATA_TYPE_PARAMETER": COMP_METADATA_TYPE_PARAMETER,
	"COMP_METADATA_TYPE_COMMANDS": COMP_METADATA_TYPE_COMMANDS,
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e COMP_METADATA_TYPE) MarshalText() ([]byte, error) {
	if name, ok := labels_COMP_METADATA_TYPE[e]; ok {
		return []byte(name), nil
	}
	return []byte(strconv.Itoa(int(e))), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *COMP_METADATA_TYPE) UnmarshalText(text []byte) error {
	if value, ok := values_COMP_METADATA_TYPE[string(text)]; ok {
	   *e = value
	} else if value, err := strconv.Atoi(string(text)); err == nil {
	   *e = COMP_METADATA_TYPE(value)
	} else {
		return fmt.Errorf("invalid label '%s'", text)
	}
	return nil
}

// String implements the fmt.Stringer interface.
func (e COMP_METADATA_TYPE) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
