//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package magothy

import (
	"strconv"
	"strings"
	"fmt"
)
// Smart battery supply status/fault flags (bitmask) for health indication. The battery must also report either MAV_BATTERY_CHARGE_STATE_FAILED or MAV_BATTERY_CHARGE_STATE_UNHEALTHY if any of these are set.
type MAV_BATTERY_FAULT uint64

const (
	// Battery has deep discharged.
	MAV_BATTERY_FAULT_DEEP_DISCHARGE MAV_BATTERY_FAULT = 1
	// Voltage spikes.
	MAV_BATTERY_FAULT_SPIKES MAV_BATTERY_FAULT = 2
	// One or more cells have failed. Battery should also report MAV_BATTERY_CHARGE_STATE_FAILE (and should not be used).
	MAV_BATTERY_FAULT_CELL_FAIL MAV_BATTERY_FAULT = 4
	// Over-current fault.
	MAV_BATTERY_FAULT_OVER_CURRENT MAV_BATTERY_FAULT = 8
	// Over-temperature fault.
	MAV_BATTERY_FAULT_OVER_TEMPERATURE MAV_BATTERY_FAULT = 16
	// Under-temperature fault.
	MAV_BATTERY_FAULT_UNDER_TEMPERATURE MAV_BATTERY_FAULT = 32
	// Vehicle voltage is not compatible with this battery (batteries on same power rail should have similar voltage).
	MAV_BATTERY_FAULT_INCOMPATIBLE_VOLTAGE MAV_BATTERY_FAULT = 64
)

var labels_MAV_BATTERY_FAULT = map[MAV_BATTERY_FAULT]string{
	MAV_BATTERY_FAULT_DEEP_DISCHARGE: "MAV_BATTERY_FAULT_DEEP_DISCHARGE",
	MAV_BATTERY_FAULT_SPIKES: "MAV_BATTERY_FAULT_SPIKES",
	MAV_BATTERY_FAULT_CELL_FAIL: "MAV_BATTERY_FAULT_CELL_FAIL",
	MAV_BATTERY_FAULT_OVER_CURRENT: "MAV_BATTERY_FAULT_OVER_CURRENT",
	MAV_BATTERY_FAULT_OVER_TEMPERATURE: "MAV_BATTERY_FAULT_OVER_TEMPERATURE",
	MAV_BATTERY_FAULT_UNDER_TEMPERATURE: "MAV_BATTERY_FAULT_UNDER_TEMPERATURE",
	MAV_BATTERY_FAULT_INCOMPATIBLE_VOLTAGE: "MAV_BATTERY_FAULT_INCOMPATIBLE_VOLTAGE",
}

var values_MAV_BATTERY_FAULT = map[string]MAV_BATTERY_FAULT{
	"MAV_BATTERY_FAULT_DEEP_DISCHARGE": MAV_BATTERY_FAULT_DEEP_DISCHARGE,
	"MAV_BATTERY_FAULT_SPIKES": MAV_BATTERY_FAULT_SPIKES,
	"MAV_BATTERY_FAULT_CELL_FAIL": MAV_BATTERY_FAULT_CELL_FAIL,
	"MAV_BATTERY_FAULT_OVER_CURRENT": MAV_BATTERY_FAULT_OVER_CURRENT,
	"MAV_BATTERY_FAULT_OVER_TEMPERATURE": MAV_BATTERY_FAULT_OVER_TEMPERATURE,
	"MAV_BATTERY_FAULT_UNDER_TEMPERATURE": MAV_BATTERY_FAULT_UNDER_TEMPERATURE,
	"MAV_BATTERY_FAULT_INCOMPATIBLE_VOLTAGE": MAV_BATTERY_FAULT_INCOMPATIBLE_VOLTAGE,
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e MAV_BATTERY_FAULT) MarshalText() ([]byte, error) {
	if e == 0 {
		return []byte("0"), nil
	}
	var names []string
	for i := 0; i < 7; i++ {
		mask := MAV_BATTERY_FAULT(1 << i)
		if e&mask == mask {
			names = append(names, labels_MAV_BATTERY_FAULT[mask])
		}
	}
	return []byte(strings.Join(names, " | ")), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *MAV_BATTERY_FAULT) UnmarshalText(text []byte) error {
	labels := strings.Split(string(text), " | ")
	var mask MAV_BATTERY_FAULT
	for _, label := range labels {
		if value, ok := values_MAV_BATTERY_FAULT[label]; ok {
			mask |= value
		} else if value, err := strconv.Atoi(label); err == nil {
			mask |= MAV_BATTERY_FAULT(value)
		} else {
			return fmt.Errorf("invalid label '%s'", label)
		}
	}
	*e = mask
	return nil
}

// String implements the fmt.Stringer interface.
func (e MAV_BATTERY_FAULT) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
