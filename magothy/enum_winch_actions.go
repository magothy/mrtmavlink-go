//autogenerated:yes
//nolint:revive,misspell,govet,lll,dupl,gocritic
package magothy

import (
	"strconv"
	"fmt"
)
// Winch actions.
type WINCH_ACTIONS uint64

const (
	// Relax winch.
	WINCH_RELAXED WINCH_ACTIONS = 0
	// Wind or unwind specified length of cable, optionally using specified rate.
	WINCH_RELATIVE_LENGTH_CONTROL WINCH_ACTIONS = 1
	// Wind or unwind cable at specified rate.
	WINCH_RATE_CONTROL WINCH_ACTIONS = 2
)

var labels_WINCH_ACTIONS = map[WINCH_ACTIONS]string{
	WINCH_RELAXED: "WINCH_RELAXED",
	WINCH_RELATIVE_LENGTH_CONTROL: "WINCH_RELATIVE_LENGTH_CONTROL",
	WINCH_RATE_CONTROL: "WINCH_RATE_CONTROL",
}

var values_WINCH_ACTIONS = map[string]WINCH_ACTIONS{
	"WINCH_RELAXED": WINCH_RELAXED,
	"WINCH_RELATIVE_LENGTH_CONTROL": WINCH_RELATIVE_LENGTH_CONTROL,
	"WINCH_RATE_CONTROL": WINCH_RATE_CONTROL,
}

// MarshalText implements the encoding.TextMarshaler interface.
func (e WINCH_ACTIONS) MarshalText() ([]byte, error) {
	if name, ok := labels_WINCH_ACTIONS[e]; ok {
		return []byte(name), nil
	}
	return []byte(strconv.Itoa(int(e))), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface.
func (e *WINCH_ACTIONS) UnmarshalText(text []byte) error {
	if value, ok := values_WINCH_ACTIONS[string(text)]; ok {
	   *e = value
	} else if value, err := strconv.Atoi(string(text)); err == nil {
	   *e = WINCH_ACTIONS(value)
	} else {
		return fmt.Errorf("invalid label '%s'", text)
	}
	return nil
}

// String implements the fmt.Stringer interface.
func (e WINCH_ACTIONS) String() string {
	val, _ := e.MarshalText()
	return string(val)
}
